package Data;

import java.util.ArrayList;

public class Market {

	private int maxPrice, minSquareFootage, minNumBath, minNumBedroom;
	private boolean lawn, pool;
	
	private double bankValue;
	
	private int multiplier = 1;
	private int monthCount;
	
	private ArrayList<House> dailyHouses = new ArrayList<House>();
	private int currentHouse, currMonth;
	
	public Market(int maxPrice, int minSquareFootage, int minNumBath, int minNumBedroom, boolean lawn, boolean pool){
		
		this.maxPrice = maxPrice;
		this.minSquareFootage = minSquareFootage;
		this.minNumBath = minNumBath;
		this.minNumBedroom = minNumBedroom;
		this.lawn = lawn;
		this.pool = pool;
		
		getNewHouses();
	}
	
	public String daysUntilUpdate(){
		
		return "New houses available in " + Integer.toString(10 - (GameCalendar.day % 10)) + " days";
	}
	
	public void updateMarket(){
		
		if(GameCalendar.month != currMonth){
			
			newTrend();
		}
		
		if(GameCalendar.day % 10 == 0 && GameCalendar.hour == 0 && GameCalendar.minute == 0){
			
			getNewHouses();
		}
		
		currMonth = GameCalendar.month;
	}
	
	public House buyHouse(){
		
		House house = getHouse();
		dailyHouses.remove(house);
		
		if(currentHouse > dailyHouses.size()) {currentHouse = 0;}
		
		return house;
	}
	
	public void nextHouse() {currentHouse++; if(currentHouse >= dailyHouses.size()) {currentHouse = 0;}}
	
	public House getHouse(){
		
		if(dailyHouses.size() > currentHouse){
			
			return dailyHouses.get(currentHouse);
		}
		
		return null;
	}
	
	public void getNewHouses(){
		
		dailyHouses = new ArrayList<House>();
		
		for(int i = 0; i < 6 + (Math.random() * 4); i++){
			
			dailyHouses.add(newHouse());
		}
	}
	
	public House newHouse() {

		House house;
		
		house = new House();
		house.setSquareFootage((int) (minSquareFootage + (500 * (0.5 - Math.random()))));
		house.setNumBath(1 + (int) (house.getSquareFootage() / 600));
		house.setNumBedroom((int) (house.getNumBath() + (int) Math.signum(.75 - Math.random())));
		house.setPrice((int) (maxPrice + (10000 * (0.5 - Math.random()))));
		house.setLawn(false);
		house.setPool(false);
		
		if(Math.random() < 0.5) {house.setLawn(true);}
		if(Math.random() < 0.5) {house.setPool(true);}
		
		return house;
	}
	
	public boolean checkHouseSale(House h){
		
		if(h.getPrice() > maxPrice && Math.abs((double) (maxPrice - h.getPrice()) / (double) maxPrice) > 0.05){return false;}
		if((h.getPool() && pool) || (h.getLawn() && lawn)){
			
			if(h.getSquareFootage() < minSquareFootage && Math.abs((double) (minSquareFootage - h.getSquareFootage()) / (double) minSquareFootage) > .75){return false;}
		}
		else if(h.getSquareFootage() < minSquareFootage && Math.abs((double) (minSquareFootage - h.getSquareFootage()) / (double) minSquareFootage) > .5){return false;}
		
		return true;
	}
	
	public void newTrend() {
		
		monthCount--;
		
		if(monthCount == 0) {
			
			double rand = Math.random();
			
			if(rand < 0.75){ //market goes up for 6 months
				
				monthCount = 6;
				multiplier = 1;
			}
			
			else if(rand >= 0.75 && rand < 0.95){ //market goes down for 2 months
				
				monthCount = 2;
				multiplier = -1;
			}
			
			else if(rand >= 0.95 && rand < 0.99){ //market booms for 2 months
				
				monthCount = 2;
				multiplier = 2;
			}
			else{ //market crashes for 4 months
				
				monthCount = 4;
				multiplier = -3;
			}
		}
		
		switch(GameCalendar.getSeason()){
		
		case "Winter":
			
			pool = false;
			lawn = false;
			break;
		case "Spring":
			
			pool = true;
			lawn = true;
			break;
		case "Summer":
			
			pool = true;
			lawn = true;
			break;
		case "Fall":
			
			pool = false;
			lawn = true;
			break;
		}
		
		maxPrice += multiplier * (1500 + 1500 * Math.random());
		
		minSquareFootage += (.75 - Math.random()) * 1000;
		minNumBath = minSquareFootage / 600;
		minNumBedroom = minNumBath + (int) (2 * (.60 - Math.random()));
		if(minNumBedroom < minNumBath - 1) {minNumBedroom = minNumBath - 1;}
	}
	
	public void setBankValue(double bankValue) {this.bankValue = bankValue;}
	public double getBankValue() {return bankValue;}
	
	public String getInfo() {return getMaxPriceAsString() + ", " + getSquareFootageAsString() + ", " + getNumBedroomsAsString() + ", " + getNumBathAsString() + ", " + getLawnAsString() + ", " + getPoolAsString();}
	public String getSquareFootageAsString() {return "Square Footage: " + Integer.toString(minSquareFootage) + " sq. ft.";}
	public String getMaxPriceAsString() {return "Max Price: $" + Integer.toString(maxPrice);}
	public String getNumBedroomsAsString() {return "Bedrooms: " + Integer.toString(minNumBedroom);}
	public String getNumBathAsString() {return "Bathrooms: " + Integer.toString(minNumBath);}
	public String getLawnAsString() {if(lawn) {return "Lawn: ✓";} else {return "Lawn: X";}}
	public String getPoolAsString() {if(pool) {return "Pool: ✓";} else {return "Pool: X";}}
}
